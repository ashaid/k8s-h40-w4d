apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  ENVIRONMENT_TYPE: "development"
  NODE_ENV: "production"
  NEXT_PUBLIC_BASE_URL: "http://backend-service:4000"
  NEXTAUTH_URL: "http://frontend-service:3000"
  TIMEZONE: "UTC"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
type: Opaque
data:
  # These are base64 encoded values - in production, use proper secrets management
  # echo -n "your-secret-value" | base64
  JWT_SECRET: ---
  BEARER_TOKEN: ---
  REFRESH_TOKEN_SECRET: ---
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: backend:latest # You would replace this with your image or build it
          imagePullPolicy: Never # For local images, use Never
          ports:
            - containerPort: 4000
          env:
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: JWT_SECRET
            - name: BEARER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: BEARER_TOKEN
            - name: REFRESH_TOKEN_SECRET
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: REFRESH_TOKEN_SECRET
            - name: TZ
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: TIMEZONE
            - name: ENVIRONMENT_TYPE
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: ENVIRONMENT_TYPE
          volumeMounts:
            - name: db-data
              mountPath: /app/database
          command: ["node", "dist/index.js"]
          workingDir: /app
          resources:
            limits:
              cpu: "500m"
              memory: "512Mi"
            requests:
              cpu: "100m"
              memory: "128Mi"
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: db-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: backend
  ports:
    - port: 4000
      targetPort: 4000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: frontend:latest # You would replace this with your image or build it
          imagePullPolicy: Never # For local images, use Never
          ports:
            - containerPort: 3000
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: NODE_ENV
            - name: NEXT_PUBLIC_BASE_URL
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: NEXT_PUBLIC_BASE_URL
            - name: NEXTAUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: JWT_SECRET
            - name: NEXTAUTH_URL
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: NEXTAUTH_URL
            - name: TZ
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: TIMEZONE
            - name: HOSTNAME
              value: "0.0.0.0"
            - name: PORT
              value: "3000"
          resources:
            limits:
              cpu: "500m"
              memory: "512Mi"
            requests:
              cpu: "100m"
              memory: "128Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: frontend
  ports:
    - port: 3000
      targetPort: 3000
  type: NodePort # This exposes the service externally through the node's IP
---
# For building images within Kubernetes cluster (optional)
# This requires installing the Kaniko executor in your cluster
apiVersion: batch/v1
kind: Job
metadata:
  name: build-backend
spec:
  template:
    spec:
      containers:
        - name: kaniko
          image: gcr.io/kaniko-project/executor:latest
          args:
            - "--context=./backend"
            - "--dockerfile=Dockerfile.backend"
            - "--destination=backend:latest"
            - "--no-push"
          volumeMounts:
            - name: docker-config
              mountPath: /kaniko/.docker/
      volumes:
        - name: docker-config
          configMap:
            name: docker-config
      restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  name: build-frontend
spec:
  template:
    spec:
      containers:
        - name: kaniko
          image: gcr.io/kaniko-project/executor:latest
          args:
            - "--context=./frontend"
            - "--dockerfile=Dockerfile.frontend"
            - "--destination=frontend:latest"
            - "--no-push"
          volumeMounts:
            - name: docker-config
              mountPath: /kaniko/.docker/
      volumes:
        - name: docker-config
          configMap:
            name: docker-config
      restartPolicy: Never
